# ДЗ 8.1. Додати 1 до числа
# Ваше завдання — написати функцію add_one, яка приймає список із цифр, які у свою чергу є одним числом. До нього необхідно додати 1.
# Тобто. Вам необхідно з набору цифр, що входять до списку, отримати число, скласти його з 1 і отриману суму, знову розбити на список із цифр.
# В результаті функція повертає список із цифр, що становлять значення суми.
# Так зі списку з цифрами [1, 2, 3, 4], має вийти число 1234. До нього додаємо 1, і отримуємо 1235. Після цього потрібно розбити отримане число на складові цифри. У результаті має бути список [1, 2, 3, 5], який повертає функція.
# Якщо ви хочете себе перевірити, використайте цей unit test
# def add_one(some_list):
#     pass
# assert add_one([1, 2, 3, 4]) == [1, 2, 3, 5], 'Test1'
# assert add_one([9, 9, 9]) == [1, 0, 0, 0], 'Test2'
# assert add_one([0]) == [1], 'Test3'
# assert add_one([9]) == [1, 0], 'Test4'
# print("ОК")
def add_one(some_list):
   add_1=1 #доданок 1
   number="".join([str(y) for y in some_list]) #записуємо список числом
   number=int(number)+add_1 #додаємо до числа доданок
   str1=str(number) #робимо число рядком, щоб порахувати довжину
   lst1=[] #порожній список
   i=0
   while i < len(str1): #в циклі створюємо новий список
       lst1.append(int(str1[i])) #додаємо елементи у список
       i += 1 # крок
   return lst1 #повертаємо новий список
assert add_one([1, 2, 3, 4]) == [1, 2, 3, 5], 'Test1'
assert add_one([9, 9, 9]) == [1, 0, 0, 0], 'Test2'
assert add_one([0]) == [1], 'Test3'
assert add_one([9]) == [1, 0], 'Test4'
print("ОК")